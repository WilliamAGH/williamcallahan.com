---
description: "ZERO TEMPERATURE development environment with absolute type safety, no assumptions, and mandatory verification workflow."
alwaysApply: true
---

# ZERO TEMPERATURE Development Environment

This project operates under **ZERO TEMPERATURE** development standards where every decision must be explicitly verified, no assumptions are permitted, and type safety is absolute.

## üéØ TRUTH-SEEKING COMMUNICATION PROTOCOL

### Empty Platitudes & Premature Agreement - ABSOLUTELY FORBIDDEN

**NEVER respond with empty confirmations:**
- ‚ùå "You're right!" (without verification)
- ‚ùå "That makes sense!" (before investigation)  
- ‚ùå "Good point!" (as filler)
- ‚ùå "I understand" (without demonstrating it)
- ‚ùå Any agreement/disagreement before code verification

**ALWAYS seek truth through investigation:**
- ‚úÖ "Let me verify that in the codebase..."
- ‚úÖ "I need to investigate before confirming..."
- ‚úÖ "After checking [file:line], I can confirm..."
- ‚úÖ Evidence-based responses with code references
- ‚úÖ Respectful but accuracy-focused communication

## üö® ZERO TOLERANCE VIOLATIONS (IMMEDIATE HALT REQUIRED)

### ABSOLUTELY FORBIDDEN - IMMEDIATE HALT CONDITIONS

- Any `@ts-ignore` usage
- Any `eslint-disable` usage  
- Any `any` type without explicit justification
- Any external data without Zod validation
- Any type assertion without runtime checks
- Boilerplate code from tutorials or examples
- Generic placeholder implementations (`// TODO: Implement this`)
- Copy-paste code from documentation examples
- Assumptions about API behavior, type definitions, or existing functionality
- Creating new files without explicit repeated clear affirmative consent

**VIOLATION PROTOCOL:**

1. **IMMEDIATELY STOP** all development work
2. **ALERT USER** with specific violation details
3. **DO NOT PROCEED** until violation is properly resolved

## üõ°Ô∏è MANDATORY PRE-TASK WORKFLOW (Required Before Any Code Changes)

### MANDATORY SEQUENCE - NO EXCEPTIONS

1. **Architecture Context Discovery:**
   - Read `docs/projects/structure/00-architecture-entrypoint.md`
   - Identify functionality domain from task description
   - Read `docs/projects/structure/[functionality].md` for that domain
   - Review any `.mmd` diagrams for that functionality

2. **Type System Review - MANDATORY for ANY task:**
   - Review ALL types in `types/` directory related to domain/functionality
   - Read actual type definitions - NEVER assume what they contain
   - Check for existing types before creating new ones
   - Search: `find types/ -name "*.ts" | xargs grep -l "[functionality-keyword]"`

3. **Existing Functionality Search - NEVER assume functionality doesn't exist:**
   - Search comprehensively: `grep -r "[task-keyword]" --include="*.ts" --include="*.tsx" .`
   - Find files: `find . -name "*[task-keyword]*" -type f`
   - Use Task tool for complex searches across multiple patterns

4. **Documentation Verification:**
   - Check `package.json` for EXACT dependency versions
   - Use MCP providers: `@mcp__context7__resolve-library-id` and `@mcp__context7__get-library-docs`
   - Read `node_modules/[package]/` directly for truth

## ‚ö° CODE MODIFICATION PRINCIPLES

### Efficiency Mandate

- **Nearly ALL code edits should result in SAME or FEWER lines of code**
- Look for duplicate code to remove during EVERY task
- Find more efficient ways to accomplish the same result
- Consolidate similar functionality

### Existing-First Policy

- ALWAYS prefer editing existing files over creating new ones
- Search for existing implementations before writing new code
- Extend existing functionality rather than duplicating
- Only create new files with explicit consent

### Real-Time Verification

- Referenced code MUST be reviewed at that moment
- Never assume what imported functions do - read them
- Check actual type definitions when using types
- Verify interface implementations immediately

## ‚úÖ VALIDATION REQUIREMENTS

### MANDATORY - BEFORE and AFTER every code change

```bash
bun run validate
```

**Requirements:**

- MUST show 0 errors, 0 warnings
- Fix ALL issues according to `@docs/projects/structure/linting-formatting.md`
- NEVER use bypass methods (@ts-ignore, eslint-disable)

### Type Safety Standards - EVERY SINGLE LINE OF CODE MUST

- Have explicit types (no implicit `any`)
- Use proper null/undefined handling
- Validate external data with Zod schemas
- Follow strictest TypeScript settings
- Pass validation with ZERO errors/warnings

## üìè FILE MANAGEMENT POLICIES

### 500-Line Limit - ABSOLUTE MAXIMUM

- No file should exceed 500 lines of code
- Monitor during edits - stop before exceeding limit
- Create refactoring PBI if approaching limit

### File Creation Restrictions

- **NO NEW FILES WITHOUT EXPLICIT REPEATED CLEAR AFFIRMATIVE CONSENT**
- Presumption is NEVER consent - must be explicitly stated
- Ask: "Should I create a new file [filename] for [purpose]?"
- Wait for clear "yes" before proceeding

## üîÑ COMMIT POLICIES

### No AI Attribution - ABSOLUTELY FORBIDDEN

**NEVER include in commits:**

- ü§ñ Generated with [Claude Code]
- Co-Authored-By: Claude <noreply@anthropic.com>
- Any other AI attribution or markers

## üîç VERIFICATION COMMANDS

```bash
# Check current dependency versions
cat package.json | jq '.dependencies'

# Find files over 400 lines (warning threshold)
find . -name "*.ts" -o -name "*.tsx" -exec wc -l {} + | awk '$1 > 400' | sort -n

# Search for existing functionality
grep -r "[keyword]" --include="*.ts" --include="*.tsx" .

# Validate codebase
bun run validate

# Review types for domain
find types/ -name "*.ts" | xargs grep -l "[domain]"
```

## üìö DOCUMENTATION SYNC

### MANDATORY - Whenever you create, delete, move, or significantly edit any file

1. Update `docs/projects/structure/00-architecture-entrypoint.md`
2. Update `docs/projects/file-overview-map.md`
3. Update specific functionality document: `docs/projects/structure/[functionality].md`

---

**REMEMBER: This is a ZERO TEMPERATURE environment. Every decision must be explicitly verified. Assumptions are violations. Type safety is absolute. Efficiency is mandatory.**
